// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetWeatherData, GetWeatherResponse, SubscribeData, ConfirmSubscriptionData, UnsubscribeData } from './types.gen';
import { zGetWeatherResponse } from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get current weather for a city
 * Returns the current weather forecast for the specified city using WeatherAPI.com.
 */
export const getWeather = <ThrowOnError extends boolean = false>(options: Options<GetWeatherData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWeatherResponse, unknown, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetWeatherResponse.parseAsync(data);
        },
        url: '/weather',
        ...options
    });
};

/**
 * Subscribe to weather updates
 * Subscribe an email to receive weather updates for a specific city with chosen frequency.
 */
export const subscribe = <ThrowOnError extends boolean = false>(options: Options<SubscribeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/subscribe',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Confirm email subscription
 * Confirms a subscription using the token sent in the confirmation email.
 */
export const confirmSubscription = <ThrowOnError extends boolean = false>(options: Options<ConfirmSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/confirm/{token}',
        ...options
    });
};

/**
 * Unsubscribe from weather updates
 * Unsubscribes an email from weather updates using the token sent in emails.
 */
export const unsubscribe = <ThrowOnError extends boolean = false>(options: Options<UnsubscribeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/unsubscribe/{token}',
        ...options
    });
};